# Example Terraform Variables File with DNS Records Configuration

# Basic Infrastructure Configuration
region              = "us-west-2"
ami                 = "ami-0c55b159cbfafe1f0"  # Ubuntu 20.04 LTS
instance_type       = "t2.micro"
instance_count      = 2                        # Number of instances (2-10)
instance_name       = "my-app"
key_name            = "my-aws-keypair"
environment         = "production"

# Container Configuration
backend_image       = "mycompany/backend:latest"
front_end_image     = "mycompany/frontend:latest"
backend_port        = 8080
front_end_port      = 3000
backend_container_name   = "backend"
front_end_container_name = "frontend"

# Network Configuration
vpc_cidr            = "10.0.0.0/16"
subnet_cidrs        = ["10.0.1.0/24", "10.0.2.0/24"]
availability_zones  = ["us-west-2a", "us-west-2b"]

# Domain and Route53 Configuration
hosted_zone_name    = "example.com"
route53_zone_id     = "Z1234567890ABC"
dns_name            = "app.example.com"
certbot_email       = "admin@example.com"
enable_load_balancer = true

# Zero-Downtime Deployment Configuration
blue_green_enabled = false          # Set to true to enable blue-green deployment
active_target_group = "blue"        # Current active target group (blue or green)
enable_rollback = true              # Enable automatic rollback on deployment failure
rollback_timeout_minutes = 5        # Timeout before triggering rollback

# External Validation and Discord Notifications
skip_deployment_validation = false         # Skip 15-minute validation for faster Terraform runs
enable_discord_notifications = false      # Enable Discord notifications for deployments
discord_webhook_url = ""                  # Discord webhook URL (keep empty if not using Discord)

# Email Configuration
create_mail_records = true
mx_records = [
  "10 mail.google.com.",
  "20 alt1.mail.google.com.",
  "30 alt2.mail.google.com."
]
spf_record = "include:_spf.google.com ~all"
dkim_selector = "google"
dkim_records = ["v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC..."]
dmarc_policy = "quarantine"
dmarc_email = "dmarc-reports@example.com"

# CNAME Records Configuration
# Simple format: subdomain = target
cname_records = {
  "blog"     = "myblog.wordpress.com."
  "shop"     = "myshop.shopify.com."
  "support"  = "support.zendesk.com."
  "cdn"      = "d111111abcdef8.cloudfront.net."
  "tracking" = "tracking.mailgun.org."
}

# TXT Records Configuration
# Format: subdomain = [list of TXT values]
# Use "@" for root domain records
txt_records = {
  "@" = [
    "google-site-verification=abc123def456",
    "facebook-domain-verification=xyz789"
  ]
  "_github-challenge" = [
    "abcdef123456"
  ]
  "mail._domainkey" = [
    "v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC..."
  ]
  "_acme-challenge" = [
    "validation-string-for-ssl-cert"
  ]
}

# Custom DNS Records (Advanced Configuration)
# Supports any DNS record type with custom TTL
custom_dns_records = {
  # A record example
  "legacy" = {
    type    = "A"
    ttl     = 3600
    records = ["192.168.1.100"]
  }
  
  # Multiple A records for round-robin
  "multi" = {
    type    = "A"
    ttl     = 300
    records = ["10.0.1.10", "10.0.1.11", "10.0.1.12"]
  }
  
  # SRV record example
  "_sip._tcp" = {
    type    = "SRV"
    ttl     = 3600
    records = ["10 60 5060 sip.example.com."]
  }
  
  # CAA record for SSL certificate authority
  "@" = {
    type    = "CAA"
    ttl     = 3600
    records = [
      "0 issue \"letsencrypt.org\"",
      "0 issuewild \"letsencrypt.org\""
    ]
  }
  
  # PTR record (if needed)
  "10.1.0.10.in-addr.arpa" = {
    type    = "PTR"
    ttl     = 3600
    records = ["mail.example.com."]
  }
}

##############################
# S3 Storage Configuration - White Label Ready
##############################

# Basic S3 Configuration
s3_bucket_name_suffix = "data-collection"    # Options: "analytics", "storage", "data-lake", "backup", "media"
s3_use_case          = "data-analytics"      # Options: "data-analytics", "backup", "media-storage", "data-lake"

# Data Organization
s3_primary_data_prefix      = "data/"        # Primary data location
s3_secondary_data_prefixes  = [              # Additional data streams for multi-tenant
  "events/",
  "metrics/", 
  "logs/"
]

# Cost Optimization
enable_s3_intelligent_tiering = true
enable_s3_lifecycle_policy   = true
s3_lifecycle_transitions = [
  {
    days          = 30
    storage_class = "STANDARD_IA"
  },
  {
    days          = 90  
    storage_class = "GLACIER"
  },
  {
    days          = 365
    storage_class = "DEEP_ARCHIVE"
  }
]

# Security Configuration
s3_versioning_enabled = true
s3_kms_key_id        = null                  # Optional: "arn:aws:kms:region:account:key/key-id"
s3_trusted_accounts  = []                    # Optional: ["123456789012", "987654321098"] for cross-account

# IAM Role Configuration
create_s3_read_only_role = false             # Create read-only role for analytics
create_s3_admin_role     = false             # Create admin role for management

# Temporary Data Configuration
s3_temp_prefixes = {
  "temp" = {
    prefix          = "temp"
    expiration_days = 7
  }
  "staging" = {
    prefix          = "staging" 
    expiration_days = 3
  }
}

# Monitoring and Examples
create_s3_partition_examples = true          # Create sample Athena partition structure
enable_s3_access_logging     = true          # Enable CloudWatch logging
s3_log_retention_days       = 30             # Log retention period